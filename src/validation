import {DefaultCrudRepository} from '@loopback/repository';
import {Category, CategoryRelations} from '../models';
import {Esv7DataSource} from '../datasources';
import {inject} from '@loopback/core';
import {getJsonSchema} from "@loopback/repository-json-schema";
import {RequestBodyValidationOptions, RestHttpErrors} from "@loopback/rest";
import AJV from 'ajv';
// @ts-ignore
import * as ajvKeywords from 'ajv-keywords';
// @ts-ignore
import _ from 'lodash';

function createValidator(
    schema: any,
    options?: RequestBodyValidationOptions,
): AJV.ValidateFunction {

    const schemaWithRef = Object.assign({components: {}}, schema);

    // See https://github.com/epoberezkin/ajv#options
    options = Object.assign(
        {},
        {
            allErrors: true,
            // nullable: support keyword "nullable" from Open API 3 specification.
            nullable: true,
        },
        options,
    );
    const ajv = new AJV(options);

    if (options.ajvKeywords === true) {
        ajvKeywords(ajv);
    } else if (Array.isArray(options.ajvKeywords)) {
        ajvKeywords(ajv, options.ajvKeywords);
    }

    return ajv.compile(schemaWithRef);
}

export class CategoryRepository extends DefaultCrudRepository<
  Category,
  typeof Category.prototype.id,
  CategoryRelations
> {
  constructor(
    @inject('datasources.esv7') dataSource: Esv7DataSource,
  ) {
    super(Category, dataSource);
     console.log();
    (this.modelClass as any).observe(
        'before save',
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (context: any, next: any) => {
          //  console.log(context);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
          const jsonSchema = getJsonSchema(this.entityClass);
           console.log(jsonSchema);
           const validate = createValidator(jsonSchema, context.options);


            if (validate(context.instance.toObject())) {
                next();
                return;
            }

            //console.log(validate.errors);

            let validationErrors = validate.errors as AJV.ErrorObject[];

            if (typeof context.options.ajvErrorTransformer === 'function') {
                validationErrors = context.options.ajvErrorTransformer(validationErrors);
            }

            const error = RestHttpErrors.invalidRequestBody();
            error.details = _.map(validationErrors, (e: any) => {
                return {
                    path: e.dataPath,
                    code: e.keyword,
                    message: e.message,
                    info: e.params,
                };
            });
            throw error;


        }
    )
  }

}
